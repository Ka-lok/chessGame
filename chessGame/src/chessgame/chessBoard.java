/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chessgame;

import chessgame.chessPieces.chessPawn;
import chessgame.chessPieces.chessRook;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.JFrame;

/**
 *
 * @author Kalok Chan
 */
public class chessBoard extends javax.swing.JFrame implements ActionListener{

    /**~
     * 
     * Creates new form chessBoard
     */
    
  
             
    public chessBoard() {
        
        initComponents();
        Layout = new GridLayout(8,8);
        setLayout(Layout);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setBoardUp();
        selected = false;
        allPossibleMoves = new ArrayList<chessTile>();
        setVisible(true);
    }
    
    
    chessTile [] [] arrayBoard = new  chessTile [8] [8];
    GridLayout Layout; 
    private boolean selected;
    private chessTile selectedTile;
    private ArrayList<String> selectedTileMoves;
    private ArrayList<chessTile> allPossibleMoves;
    
    public void setBoardUp(){
       
        int x = 0;
        int y = 0;
        
       
        while(x<8){
            
            while(y<8){
                chessTile temp = new chessTile();
                temp.addActionListener(this);
                this.add(temp);
                temp.setVisible(true);
                temp.setX(x);
                temp.setY(y);
                
                arrayBoard [x] [y] = temp;
                
                y = y + 1;
            }
            y = 0;
            x = x + 1;
        }
       
        addPawns();
        addRooks();
        
    }
     
    public void addPawns(){
        int counter = 0;
        while(counter < 8){
        chessTile temp = arrayBoard [1] [counter];
        temp.setChessPiece(new chessPawn());
        temp.setText(temp.getChessPiece().getShortName());
        counter = counter + 1;
        }
    }
    
    public void addRooks(){
        chessTile temp = arrayBoard [0] [0];
        temp.setChessPiece(new chessRook());
        temp.setText(temp.getChessPiece().getShortName());
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 765, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 416, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(chessBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(chessBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(chessBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(chessBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new chessBoard().setVisible(true);
            }
        });
    }

    @Override
    public void actionPerformed(ActionEvent e) {
       
        chessTile temp = (chessTile) e.getSource();
        if(temp.getHasPiece()){
            if(selected){
                selectedTile.setBackground(new Color(240,240,240));
                
                int numberOfPossibleMoves = allPossibleMoves.size();
                int counter = 0;
                while(numberOfPossibleMoves > counter){
                    allPossibleMoves.get(counter).setBackground(new Color(240,240,240));
                    counter = counter + 1;
                }
                
                allPossibleMoves.clear();
            }
            selected = true;
            selectedTile = temp;
            temp.setBackground(Color.red);
            checkMoves(temp);
        }
        
        
    }
    
    public void checkMoves(chessTile tile){
        int numberOfMoves = tile.getChessPiece().getMoves().size();
        selectedTileMoves = tile.getChessPiece().getMoves();
        int counter = 0;
        while(numberOfMoves > counter){
            chessTile possibleMove;
            if(selectedTileMoves.get(counter).equals("F+1")){
               possibleMove = arrayBoard [tile.getX()+ 1] [tile.getY()];
               allPossibleMoves.add(possibleMove);
               possibleMove.setBackground(Color.green);
            }
            
            if(selectedTileMoves.get(counter).equals("F++")){
                int possibleMovesYPosition = selectedTile.getY() + 1;
                
                while(possibleMovesYPosition < 8 && possibleMovesYPosition > -1){
               possibleMove = arrayBoard [possibleMovesYPosition] [tile.getX()];
               allPossibleMoves.add(possibleMove);
               possibleMove.setBackground(Color.blue);
               
               possibleMovesYPosition = possibleMovesYPosition + 1;
                }
            }
            
            if(selectedTileMoves.get(counter).equals("B++")){
                int possibleMovesYPosition = selectedTile.getY() - 1;
                
                while(possibleMovesYPosition < 8 && possibleMovesYPosition > -1){
               possibleMove = arrayBoard [possibleMovesYPosition] [tile.getX()];
               allPossibleMoves.add(possibleMove);
               possibleMove.setBackground(Color.pink);
               
               possibleMovesYPosition = possibleMovesYPosition - 1;
                }
            }
            
            if(selectedTileMoves.get(counter).equals("R++")){
                int possibleMovesXPosition = selectedTile.getX() + 1;
                
                
                while(possibleMovesXPosition < 8 && possibleMovesXPosition > -1){
               possibleMove = arrayBoard [tile.getY()] [possibleMovesXPosition];
               allPossibleMoves.add(possibleMove);
               possibleMove.setBackground(Color.yellow);
               
               possibleMovesXPosition = possibleMovesXPosition + 1;
                }
            }
            
            if(selectedTileMoves.get(counter).equals("L++")){
                int possibleMovesXPosition =  selectedTile.getY() - 1;
                
               
                while(possibleMovesXPosition < 8 && possibleMovesXPosition > -1){
               possibleMove = arrayBoard [tile.getY()] [possibleMovesXPosition];
               allPossibleMoves.add(possibleMove);
               possibleMove.setBackground(Color.green);
               
               possibleMovesXPosition = possibleMovesXPosition - 1;
                }
                
            }
            
            
            
            counter = counter + 1;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
